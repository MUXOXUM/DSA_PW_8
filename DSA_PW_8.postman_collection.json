{
	"info": {
		"_postman_id": "25505add-2321-455d-aee2-e9ad95a58e1a",
		"name": "DSA_PW_8",
		"description": "Технологии разработки серверных приложений - Задание 8  \nСервер работает на http://localhost:3000EndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45386768",
		"_collection_link": "https://eldonin-8618923.postman.co/workspace/Eldonin's-Workspace~86405fc1-b391-4ee7-8dcf-a3afd2b86e3e/collection/45386768-25505add-2321-455d-aee2-e9ad95a58e1a?action=share&source=collection_link&creator=45386768"
	},
	"item": [
		{
			"name": "Drugs",
			"item": [
				{
					"name": "Add drug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 201 Created\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the created drug with an ID\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"        pm.expect(responseData.id).to.be.a('number');\r",
									"        pm.expect(responseData.name).to.eql(\"Amoxicillin\");\r",
									"        pm.expect(responseData.manufacturer).to.eql(\"Valdor\");\r",
									"        pm.expect(responseData.price).to.eql(99.98);\r",
									"        // Store the ID for use in other requests (e.g., GET by ID, PUT, DELETE)\r",
									"        pm.collectionVariables.set(\"createdDrugId\", responseData.id);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Name, manufacturer, and price are required\", function () {\r",
									"        // This test is more conceptual for POST.\r",
									"        // You would create separate requests with missing fields to test this.\r",
									"        // For example, a request with no \"name\" should return 400.\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Amoxicillin\",\r\n        \"manufacturer\": \"Valdor\",\r\n        \"dosage\": \"250mg\",\r\n        \"price\": 99.98\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/drugs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all drugs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is an array\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    pm.test(\"If drugs exist, array contains drug objects\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        if (responseData.length > 0) {\r",
									"            const firstDrug = responseData[0];\r",
									"            pm.expect(firstDrug).to.be.an('object');\r",
									"            pm.expect(firstDrug).to.have.all.keys('id', 'name', 'manufacturer', 'dosage', 'price');\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/drugs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get drug by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK for existing drug\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the correct drug details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdDrugId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"        pm.expect(responseData.name).to.exist; // Or check against a known value if you update it\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/drugs/{{createdDrugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs",
								"{{createdDrugId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get drug by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON and an array\", function () {\r",
									"        pm.response.to.be.json;\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Results include drugs matching the search term\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const searchTerm = \"amox\"; // The search term used in the request URL query parameter\r",
									"        if (responseData.length > 0) {\r",
									"            responseData.forEach(function(drug) {\r",
									"                pm.expect(drug.name.toLowerCase()).to.include(searchTerm);\r",
									"            });\r",
									"        } else {\r",
									"            // This is okay if no drugs match, but you might want a more specific test\r",
									"            // if you know a drug *should* match.\r",
									"            console.log(\"Search returned no results, which might be expected.\");\r",
									"        }\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/drugs/search?name=Amox",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs",
								"search"
							],
							"query": [
								{
									"key": "name",
									"value": "Amox"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upd drug by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the updated drug details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdDrugId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"        pm.expect(responseData.name).to.eql(\"Amoxicillin Forte\");\r",
									"        pm.expect(responseData.price).to.eql(1200.50);\r",
									"        pm.expect(responseData.dosage).to.eql(\"500mg\");\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Amoxicillin Forte\",\r\n        \"price\": 1200.50,\r\n        \"dosage\": \"500mg\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/drugs/{{createdDrugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs",
								"{{createdDrugId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete drug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the deleted drug details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdDrugId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/drugs/{{createdDrugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"drugs",
								"{{createdDrugId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pharmacies",
			"item": [
				{
					"name": "Add pharmacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 201 Created\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the created pharmacy with an ID\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('object');\r",
									"        pm.expect(responseData.id).to.be.a('number');\r",
									"        pm.expect(responseData.name).to.eql(\"City Central Pharmacy\");\r",
									"        pm.expect(responseData.address).to.eql(\"Penza, street 14\");\r",
									"        pm.expect(responseData.phone).to.eql(\"79023435613\");\r",
									"        // Store the ID for use in other requests\r",
									"        pm.collectionVariables.set(\"createdPharmacyId\", responseData.id);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Name and address are required\", function () {\r",
									"        // This is conceptual for the main successful POST.\r",
									"        // Create separate POST requests with missing \"name\" or \"address\" to test 400 error.\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"City Central Pharmacy\",\r\n        \"address\": \"Penza, street 14\",\r\n        \"phone\": \"79023435613\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all pharmacies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is an array\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    pm.test(\"If pharmacies exist, array contains pharmacy objects\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        if (responseData.length > 0) {\r",
									"            const firstPharmacy = responseData[0];\r",
									"            pm.expect(firstPharmacy).to.be.an('object');\r",
									"            pm.expect(firstPharmacy).to.have.all.keys('id', 'name', 'address', 'phone');\r",
									"        }\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get pharmacy by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK for existing pharmacy\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the correct pharmacy details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdPharmacyId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"        pm.expect(responseData.name).to.eql(\"City Central Pharmacy\"); // Or the name of the pharmacy you expect\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies/{{createdPharmacyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies",
								"{{createdPharmacyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get pharmacy by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON and an array\", function () {\r",
									"        pm.response.to.be.json;\r",
									"        const responseData = pm.response.json();\r",
									"        pm.expect(responseData).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Results include pharmacies matching the name search term\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const searchTerm = \"Central\"; // ensure lowercase for comparison\r",
									"        pm.expect(responseData.length).to.be.greaterThan(0, \"Expected search to return at least one result for 'Central'\");\r",
									"        // if (responseData.length > 0) {\r",
									"        //     responseData.forEach(function(pharmacy) {\r",
									"        //         pm.expect(pharmacy.name.toLowerCase().includes(searchTerm) || pharmacy.address.toLowerCase().includes(searchTerm)).to.be.true;\r",
									"        //     });\r",
									"        // }\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies/search?query=Central",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "Central"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upd pharmacy by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the updated pharmacy details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdPharmacyId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"        pm.expect(responseData.name).to.eql(\"Pharmacy of Sun\");\r",
									"        pm.expect(responseData.phone).to.eql(\"78435723211\");\r",
									"        pm.expect(responseData.address).to.eql(\"Penza, street 14\"); // Address should remain unchanged\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"name\": \"Pharmacy of Sun\",\r\n        \"phone\": \"78435723211\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies/{{createdPharmacyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies",
								"{{createdPharmacyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete pharmacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    pm.test(\"Status code is 200 OK\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response is JSON\", function () {\r",
									"        pm.response.to.be.json;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response contains the deleted pharmacy details\", function () {\r",
									"        const responseData = pm.response.json();\r",
									"        const expectedId = parseInt(pm.collectionVariables.get(\"createdPharmacyId\"));\r",
									"        pm.expect(responseData.id).to.eql(expectedId);\r",
									"        pm.expect(responseData.name).to.eql(\"Pharmacy of Sun\"); // Name from the last update\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/pharmacies/{{createdPharmacyId}}\n",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"pharmacies",
								"{{createdPharmacyId}}\n"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Add Drug to Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct inventory data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(1);",
									"    pm.expect(responseData.drugId).to.eql(1);",
									"    pm.expect(responseData.quantity).to.eql(100);",
									"    pm.expect(responseData.purchasePrice).to.eql(15.99);",
									"    pm.expect(responseData.batchNumber).to.eql(\"BATCH001\");",
									"    pm.expect(responseData).to.have.property('expiryDate');",
									"    ",
									"    // Save pharmacy and drug IDs for other tests",
									"    pm.collectionVariables.set(\"pharmacyId\", responseData.pharmacyId);",
									"    pm.collectionVariables.set(\"drugId\", responseData.drugId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 100,\n    \"purchasePrice\": 15.99,\n    \"expiryDate\": \"2025-12-31\",\n    \"batchNumber\": \"BATCH001\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{createdPharmacyId}}/drugs/{{createdDrugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{createdPharmacyId}}",
								"drugs",
								"{{createdDrugId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pharmacy Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array with items\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"    pm.expect(responseData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Drug in Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct drug data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(parseInt(pm.collectionVariables.get(\"pharmacyId\")));",
									"    pm.expect(responseData.drugId).to.eql(parseInt(pm.collectionVariables.get(\"drugId\")));",
									"    pm.expect(responseData.quantity).to.eql(100);",
									"    pm.expect(responseData.purchasePrice).to.eql(15.99);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/drugs/{{drugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"drugs",
								"{{drugId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Drug in Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated inventory data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(parseInt(pm.collectionVariables.get(\"pharmacyId\")));",
									"    pm.expect(responseData.drugId).to.eql(parseInt(pm.collectionVariables.get(\"drugId\")));",
									"    pm.expect(responseData.quantity).to.eql(50);",
									"    pm.expect(responseData.purchasePrice).to.eql(17.99);",
									"    pm.expect(responseData.batchNumber).to.eql(\"BATCH002\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 50,\n    \"purchasePrice\": 17.99,\n    \"batchNumber\": \"BATCH002\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/drugs/{{drugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"drugs",
								"{{drugId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Expired Drugs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/expired",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"expired"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Out of Stock Drugs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/outofstock",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"outofstock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Total Inventory Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct value data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(parseInt(pm.collectionVariables.get(\"pharmacyId\")));",
									"    pm.expect(responseData).to.have.property('totalValue');",
									"    pm.expect(responseData.totalValue).to.be.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/value",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"value"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-existent Drug",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Inventory item not found.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/999/drugs/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"999",
								"drugs",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Invalid Drug to Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Quantity, purchase price, and expiry date are required.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 100\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/1/drugs/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"1",
								"drugs",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Drug from Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct deleted item data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(parseInt(pm.collectionVariables.get(\"pharmacyId\")));",
									"    pm.expect(responseData.drugId).to.eql(parseInt(pm.collectionVariables.get(\"drugId\")));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/inventory/pharmacies/{{pharmacyId}}/drugs/{{drugId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"inventory",
								"pharmacies",
								"{{pharmacyId}}",
								"drugs",
								"{{drugId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Suppliers",
			"item": [
				{
					"name": "Create New Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct supplier data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.eql(\"Test Supplier\");",
									"    pm.expect(responseData.contactPerson).to.eql(\"John Doe\");",
									"    pm.expect(responseData.phone).to.eql(\"+1234567890\");",
									"    pm.expect(responseData.email).to.eql(\"test@supplier.com\");",
									"    pm.expect(responseData).to.have.property('id');",
									"    ",
									"    // Save supplier ID for other tests",
									"    pm.collectionVariables.set(\"supplierId\", responseData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Supplier\",\n    \"contactPerson\": \"John Doe\",\n    \"phone\": \"+1234567890\",\n    \"email\": \"test@supplier.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/suppliers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Suppliers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/suppliers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Supplier by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct supplier data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"supplierId\")));",
									"    pm.expect(responseData.name).to.eql(\"Test Supplier\");",
									"    pm.expect(responseData.contactPerson).to.eql(\"John Doe\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/suppliers/{{supplierId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers",
								"{{supplierId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated supplier data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"supplierId\")));",
									"    pm.expect(responseData.name).to.eql(\"Updated Supplier\");",
									"    pm.expect(responseData.contactPerson).to.eql(\"Jane Doe\");",
									"    pm.expect(responseData.phone).to.eql(\"+0987654321\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Supplier\",\n    \"contactPerson\": \"Jane Doe\",\n    \"phone\": \"+0987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/suppliers/{{supplierId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers",
								"{{supplierId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Invalid Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Name and contact person are required.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Supplier\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/suppliers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-existent Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Supplier not found.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/suppliers/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has deleted supplier data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"supplierId\")));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/suppliers/{{supplierId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"suppliers",
								"{{supplierId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create New Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct order data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.pharmacyId).to.eql(1);",
									"    pm.expect(responseData.supplierId).to.eql(1);",
									"    pm.expect(responseData.items).to.be.an('array').that.has.lengthOf(2);",
									"    pm.expect(responseData.status).to.eql('pending');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('orderDate');",
									"    pm.expect(responseData).to.have.property('expectedDeliveryDate');",
									"    ",
									"    // Save order ID for other tests",
									"    pm.collectionVariables.set(\"createdOrderId\", responseData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pharmacyId\": 1,\n    \"supplierId\": 1,\n    \"items\": [\n        {\n            \"drugId\": 1,\n            \"quantity\": 100,\n            \"pricePerItem\": 10.50\n        },\n        {\n            \"drugId\": 2,\n            \"quantity\": 50,\n            \"pricePerItem\": 25.75\n        }\n    ],\n    \"expectedDeliveryDate\": \"2024-04-01T00:00:00.000Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(Array.isArray(responseData)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct order data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"createdOrderId\")));",
									"    pm.expect(responseData.pharmacyId).to.eql(1);",
									"    pm.expect(responseData.supplierId).to.eql(1);",
									"    pm.expect(responseData.items).to.be.an('array').that.has.lengthOf(2);",
									"    pm.expect(responseData.status).to.eql('pending');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{createdOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{createdOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated order data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"createdOrderId\")));",
									"    pm.expect(responseData.status).to.eql('processing');",
									"    pm.expect(responseData.items).to.be.an('array').that.has.lengthOf(1);",
									"    pm.expect(responseData.items[0].quantity).to.eql(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"processing\",\n    \"items\": [\n        {\n            \"drugId\": 1,\n            \"quantity\": 200,\n            \"pricePerItem\": 10.50\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{createdOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{createdOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-existent Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Order not found.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/999999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Invalid Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Pharmacy ID, Supplier ID, and at least one item are required.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pharmacyId\": 1,\n    \"supplierId\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order with Invalid Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.response.to.have.body(\"Each order item must have drugId, quantity, and pricePerItem.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"pharmacyId\": 1,\n    \"supplierId\": 1,\n    \"items\": [\n        {\n            \"drugId\": 1\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete/Cancel Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has cancelled order data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.id).to.eql(parseInt(pm.collectionVariables.get(\"createdOrderId\")));",
									"    pm.expect(responseData.status).to.eql('cancelled');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/orders/{{createdOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"orders",
								"{{createdOrderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "SECRET_STATIC_TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "createdDrugId",
			"value": ""
		},
		{
			"key": "createdPharmacyId",
			"value": ""
		},
		{
			"key": "supplierId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdOrderId",
			"value": ""
		},
		{
			"key": "pharmacyId",
			"value": ""
		},
		{
			"key": "drugId",
			"value": ""
		}
	]
}